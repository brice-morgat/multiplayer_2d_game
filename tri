//Script d'initialisation du serveur
var mongojs = require("mongojs");
var db = mongojs('localhost:27017/myGame',  ['account', 'progress']);

var express = require('express');
const { pathToFileURL } = require('url');
var app = express();
var serv = require('http').Server(app);
 
app.get('/',function(req, res) {
    res.sendFile(__dirname + '/client/index.html');
});
app.use('/client',express.static(__dirname + '/client'));
serv.listen(2000);

console.log("Serveur : Serveur connecté");

//********************************************************

//Création des joueurs
var SOCKET_LIST = {};   

var Entity = function(){
    var self = {
        x:250,
        y:250,
        spdX:0,
        spdY:0,
        id:""
    } 
    self.update = function(){
        self.updatePosition();
    }
    self.updatePosition = function(){
        self.x += self.spdX;
        self.y += self.spdY;
    }

    self.getDistance = function(pt) {
        return Math.sqrt(Math.pow(self.x-pt.x,2) + Math.pow(self.y-pt.y,2));
    }

    return self;
}

var Player = function(id){
    var self = Entity();
    self.id = id;
    self.number = "" + Math.floor(10 * Math.random());
    //Ajout du clavier (on vérifie si les touches ne sont pas activé)
    self.pressingUp = false;
    self.pressingDown = false;
    self.pressingLeft = false;
    self.pressingRight = false;
    self.vitesse = 10;
    self.hp = 10;
    self.hpMax = 10;
    self.score = 0;

    self.pressingAttack = false;
    self.mouseAngle = 0;
    //************* */
    var super_update = self.update;
    self.update = function(){
        self.updateSpd();
        super_update();
        if (self.pressingAttack){
            self.shootBullet(self.mouseAngle);
        }
    }
    
    //Tir / attaque du joueur
    self.shootBullet = function(angle){
        var b = Bullet(self.id,angle);
        b.x = self.x;
        b.y = self.y;
    }

    //Changement d'état de la touche pour Déplacement du joueur
    self.updateSpd = function(){
        if(self.pressingUp)
            self.spdY = -self.vitesse;
        else if (self.pressingDown)
            self.spdY = self.vitesse;
        else 
            self.spdY = 0;
        
        if (self.pressingLeft)
            self.spdX = -self.vitesse;
        else if (self.pressingRight)
            self.spdX = self.vitesse;
        else 
            self.spdX = 0;
    }

    self.getInitPack = function(){
		return {
			id:self.id,
			x:self.x,
			y:self.y,	
            number:self.number,
            hp:self.hp,
            hpMax:self.hpMax,
            score:self.score
		};		
    }

    self.getUpdatePack = function(){
		return {
			id:self.id,
			x:self.x,
            y:self.y,
            hp:self.hp,
            score:self.score
		}	
	}
    
    Player.list[id] = self;

    initPack.player.push(self.getInitPack());
    return self;
}
//*********************************************** */
//Fonction du joueur avec socket.io //
Player.list = {};
Player.onConnect = function(socket){
    var player = Player(socket.id);

    //Quand le joueur veut se déplacer 
    socket.on('keyPress',function(data){
		if(data.inputId === 'left')
			player.pressingLeft = data.state;
		else if(data.inputId === 'right')
			player.pressingRight = data.state;
		else if(data.inputId === 'up')
			player.pressingUp = data.state;
		else if(data.inputId === 'down')
            player.pressingDown = data.state;
            
        else if (data.inputId === 'attack')
            player.pressingAttack = data.state;
        else if(data.inputId === 'mouseAngle')
            player.mouseAngle = data.state;
    });

    socket.emit('init',{
        player:Player.getAllInitPack(),
        bullet:Bullet.getAllInitPack()
    })
}

Player.getAllInitPack = function(){
    var players = [];
    for (var i in Player.list)
        players.push(Player.list[i].getInitPack());
    return players;
}

Player.onDisconnect = function(socket) {
    delete Player.list[socket.id];
    removePack.player.push(socket.id);
}

Player.update = function(){
    var pack = [];
	for(var i in Player.list){
		var player = Player.list[i];

        player.update();

		pack.push(player.getUpdatePack());		
    }
    return pack;
}
//************************************* */


//**************************************************************** */

var isValidPassword = function(data,cb){
    db.account.find({username:data.username, password:data.password} ,function(err,res) {
        if(res.length > 0)
            cb(true);
        else
            cb(false);
    });
}

var isUsernameTaken = function(data,cb){
    db.account.find({username:data.username} ,function(err,res) {
        if(res.length > 0)
            cb(true);
        else
            cb(false);
    });
}

var addUsername = function(data,cb){
    db.account.insert({username:data.username, password:data.password} ,function(err) {
        cb();
    });
}

//Liaison avec socket.io
var io = require('socket.io')(serv,{});

//Connexion du joueur
io.sockets.on('connection', function(socket){
	socket.id = Math.random();
    SOCKET_LIST[socket.id] = socket;

	socket.on('signIn',function(data){
		isValidPassword(data,function(res){
			if(res){
				Player.onConnect(socket);
				socket.emit('signInResponse',{success:true});
			} else {
				socket.emit('signInResponse',{success:false});			
			}
		});
	});
	socket.on('signUp',function(data){
		isUsernameTaken(data,function(res){
			if(res){
				socket.emit('signUpResponse',{success:false});		
			} else {
				addUsername(data,function(){
					socket.emit('signUpResponse',{success:true});					
				});
			}
		});	
	});

    //Tchat du jeu :
    //Envoi de message
    socket.on('sendMsgToServer', function(data) {
        var playerName = ("" + socket.id).slice(2,7);
        for (var i in SOCKET_LIST) {
            SOCKET_LIST[i].emit('addToChat',playerName + ': ' + data);
        }
    });
    //Debug
    socket.on('evalServer', function(data) {
        var res = eval(data);
        socket.emit('evalAnswer',res);
    });

    //Déconnection du joueur
	socket.on('disconnect',function(){
        delete SOCKET_LIST[socket.id];
        Player.onDisconnect(socket);
    });
});
//****************************************** */
//Boucle infini du programme
var initPack = {player:[], bullet:[]};
var removePack = {player:[], bullet:[]};

setInterval(function(){
     var pack = {
         player:Player.update(),
         bullet:Bullet.update()
     }
 
	for(var i in SOCKET_LIST){
        var socket = SOCKET_LIST[i];
        socket.emit('init',initPack);
        socket.emit('update',pack);
        socket.emit('remove',removePack);
    }
    initPack.player = [];
    initPack.bullet = [];
    removePack.player = [];
    removePack.bullet = [];
},1000/25);